node{
     
    stage('SCM Checkout'){
        git credentialsId: 'GIT_CREDENTIALS', url:  'https://github.com/vasantharajksks/JAVA-SPringBOot-mongo.git',branch: 'main'
    }
    
    stage(" Maven Clean Package"){
      def mavenHome =  tool name: "MAVEN", type: "maven"
      def mavenCMD = "${mavenHome}/bin/mvn"
      sh "${mavenCMD} clean package"
      
    } 
    
   stage("build & SonarQube analysis") {
          
              withSonarQubeEnv('sonarserver') {
	         def mavenHome =  tool name: "MAVEN", type: "maven"
      		 def mavenCMD = "${mavenHome}/bin/mvn"
     		 sh "${mavenCMD} clean package sonar:sonar"
                 
              }
          
      }

      stage("Quality Gate"){
          timeout(time: 1, unit: 'MINUTES') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
      }
    
    
    
    stage('Build Docker Image'){
        sh 'docker build -t vasanth24/spring-boot-mongo .'
    }
    
    stage('Push Docker Image'){
        withCredentials([string(credentialsId: 'DOKCER_HUB_PASSWORD', variable: 'DOKCER_HUB_PASSWORD')]) {
          sh "docker login -u vasanth24 -p ${DOKCER_HUB_PASSWORD}"
        }
        sh 'docker push vasanth24/spring-boot-mongo'
     }
     
     stage("Deploy To Kuberates Cluster"){
     node("k8s"){
       kubernetesDeploy(
         configs: 'springBootMongo.yml', 
         kubeconfigId: 'KUBERNATES_CONFIG',
         enableConfigSubstitution: true
        )
     }
     
	 
	  /**
      stage("Deploy To Kuberates Cluster"){
        sh 'kubectl apply -f springBootMongo.yml'
      } **/
     
}

}
